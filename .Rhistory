getwd()
df <- read.csv("mRNA_expr.csv")
head(df,2)
view(df)
df <- read.csv("mRNA_expr.csv")
head(df,2)
view(df)
df <- read.csv("mRNA_expr.csv")
head(df,2)
view(df)
df <- read.csv("mRNA_expr.csv")
head(df,2)
View(df)
df <- read.csv("mRNA_expr.csv")
head(df,2)
View(df)
View(df)
View(df)
#long_df <-
long_df <- gather(df, dataset, gen, expresion_level, 3:9, factor_key=TRUE)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
#long_df <-
long_df <- gather(df, dataset, gen, expresion_level, 3:9, factor_key=TRUE)
#long_df <-
long_df <- gather(df, dataset, gen, expresion_level, GATA3:GAPDH, factor_key=TRUE)
#long_df <-
long_df <- pivot_longer(df, 2:9, names_to = c("dataset", "gen"), values_to = "expresion_level")
#long_df <-
long_df <- pivot_longer(df, 2:9, names_to = ("dataset", "gen"), values_to = "expresion_level")
#long_df <-
long_df <- pivot_longer(df, 2:9, names_to = ("dataset" "gen"), values_to = "expresion_level")
#long_df <-
long_df <- pivot_longer(df, 2:9, names_to = ("dataset"), values_to = "expresion_level")
getwd()
df <- read.csv("data/mRNA_expr.csv")
long_df <-
long_df <- function(df){
newfuncion <- pivot_longer(df, 3:9, names_to = "gen",
values_to = "expresion_level")
return(newfuncion)}
# Genere la data df_long
data_long_new = long_df(df)[ , 2:4]
# Genere la data df_long
# Genere la data df_long
data_long_new = long_df(df)[ , 2:4]
# Genere la data df_long
library(tidyr)
data_long_new = long_df(df)[ , 2:4]
df_long <- data.frame(data_long_new)
# Genere la data df_long
library(tidyverse)
data_long_new = long_df(df)[ , 2:4]
df_long <- data.frame(data_long_new)
# Genere la data df_long
library(tidyverse)
data_long_new = long_df(df)[ , 2:4]
df_long <- data.frame(data_long_new)
# Escriba el código para crear el Descriptive table
#install.packages("sjPlot") #Instalar paquete faltante
library(dplyr)
library(sjPlot)
library(sjmisc)
tabla_descriptiva1 <- df_long %>% group_by(dataset,
gen)
tabla_descriptiva2 <- descr(x=tabla_descriptiva1,
out="browser",
file="results/mRNA_expr_summary.doc")
tabla_descriptiva2
# Escriba el código para crear el Descriptive table
#install.packages("sjPlot") #Instalar paquete faltante
library(dplyr)
library(sjPlot)
library(sjmisc)
tabla_descriptiva1 <- df_long %>% group_by(dataset,
gen)
tabla_descriptiva2 <- descr(x=tabla_descriptiva1,
out="browser",
file="results/mRNA_expr_summary.doc")
tabla_descriptiva2
# Escriba el código para crear la función tcga_boxplots
#library(tidyverse)
library(ggplot2)
tcga_boxplots <- function(data){
boxplots <- df_long %>%
filter (dataset == data) %>%
ggplot(aes(x=gen,
y=expresion_level,
color = gen)) +
geom_boxplot(size=0.5) +
geom_jitter (size=1)
}
# Escriba el código para generar la lista.
cancertype_boxplots_uniques <- unique(df_long$dataset)
cancertype_boxplots <- lapply(cancertype_boxplots_uniques,
tcga_boxplots)
# Escriba el código para guardar la tercera figura de la lista.
#Tercer plot de la lista cancertype_boxplots
cancertype_boxplots_valor <- cancertype_boxplots[[3]]
ggsave("results/boxplot3.png",
dpi = 300,
limitsize = TRUE)
# Escriba aquí su función reg_gen_expression
reg_gen_expression <- function(cancertype_boxplots_valor){
gen1 = cancertype_boxplots_valor[1]
gen2 = cancertype_boxplots_valor[2]
filtro_1 <- df_long %>%
filter (gen == gen1)
filtro_2 <- df_long %>%
filter (gen == gen2)
datanewgenes <- cbind(filtro_1,
filtro_2)
reg_genplots_geom_point <- tibble("dataset" = datanewgenes[,1],
"gen1" = datanewgenes[,3],
"gen2" = datanewgenes[,6]) %>%
ggplot(aes(x = gen1,
y = gen2,
color = dataset)) +
geom_point(size = 2) +
geom_smooth(method = lm,
formula = y~x,
se = FALSE)
}
# Escriba el código para generar la lista.
genunique <- unique(df_long$gen)
genes_uniques <- combn(genunique,
m=2,
simplify = FALSE)
#lista reg_genplots
reg_genplots <- lapply(genes_uniques,
reg_gen_expression)
# Escriba el código para guardar el onceavo plot.
reg_genplots_valor <- reg_genplots[[11]]
ggsave("results/regresion11.pdf",
dpi = 300,
limitsize = TRUE)
